[1. variable]
----
null은 안에 확실히 없는 것
undefined는 안에 무엇이 있는 지 모르는 것
----
백틱(`)
`~문자~ ${변수}`
----
symbol의 역할: 고유한 식별자를 부여하기 위해서
똑같은 string이지만 다른 식별자로 인식한다.
이를 같게 하기위해서는
Symbol.for을 사용
----
[2. operator]
----
== loose equality, 타입이 상관없다
=== strict equality, 타입까지 신경써서 비교한다
----
while과 do while의 차이는
while은 시작할 때 조건을 확인하고
do while은 마지막에 조건을 확인한다
----
[3. function]
----
기저 사례 조건을 제일 먼저 작성하는 것이 좋다
----
default parameter = 파라미터가 들어오지 않았을 때
파라미터에 default값을 넣어두는 것
ex)
function showMessage(message, from = 'unknown'){
..
}
이럴 경우 from 값이 들어오지 않으면 default값인 unknown이 들어가게 된다
----
rest parameter = 배열 형태의 파라미터를 받는다
ex)
function printAll(..args){
...
}
...args는 ...을 통해 args라는 배열에 파라미터로 받아온 값들을 넣어서
함수를 실행시킨다는 뜻이다
----
function은 선언하면 hoisting이 되어 선언되기 전에
미리 call할 수 있다.
----
first-class function
변수에 함수를 할당한다.
❓❓
hoisting 되지 않는다.
콜백은 가능하다.
>>블로그를 통해 해결
>>https://draw-code-boy.tistory.com/4
----
Arrow function
:first-class function, anonymous function
const add = function (a, b){
    return a + b;
}
const add = (a, b) => a + b;
변수 선언 = (매개변수) => 리턴 값;
리턴하기 위한 body 부분이 길어질 때
{}을 써서 body를 아래와 같이 구현한다.

const simpleMultiply = (a, b) => {
    // do something more
    return a * b;
};
----
[4. class]
----
클래스는 templete이라 볼 수 있다.
(object를 생성하기 위한)
오브젝트는 클래스를 통해 생성하는 방법과 (object constructor)
직접 선언하는 방법이 있다. (object literal)
----
class는 constructor와 methods로 구성된다.
ex)
class Person{
    //constructor
    constructor(name, age){//생성자
        //fields
        this.name = name;
        this.age = age;
    }

    //methods
    speak(){
        console.log(`${this.name}: hello!`);
    }
}
이 클래스 선언을 통해
const ellie = new Person('ellie', 20);
다음 오브젝트를 생성할 수 있다.
----
set = 초기설정 (기저 사례를 벋어날 때)
get = 초기설정을 거친 값을 반환
----
privateField = 내부를 숨기고, 다른 곳에서 값을 함부로 건드리지 못 하게 하는 데에 사용
----
static = 클래스로부터 생성된 모든 인스턴스들이 공유하는 멤버 변수
static 정리(?)
클래스의 인스턴스는 클래스로부터 오브젝트라는 인스턴스를 생성한다.
this라는 인자를 받아 constructor생성하고, constructor로부터 인자를 받아
method가 작동하지만 초기에 static이라는 변수는 어떠한 인스턴스에도 상관없이
선언되어있는 변수인 듯하다.
----
Inheritance : extends
어떠한 클래스를 만들어 사용하고, 그 클래스로부터 수많은 오브젝트가 있지만
오브젝트들을 하나하나 따로 정형화 시킬 수 없기에
extends를 사용하여 말 그대로 어떠한 클래스를 연장시켜 새로운 클래스를 정의함을 의미한다.
----
[5. object]
오브젝트는 자바스크립트의 데이터타입 중 하나로 연관된 데이터들을 한 번에 모아둔 것이다.
----
for ~ in ~
for key in obj
오브젝트안에 어떤 키들을

for ~ of ~
for value of iterable
이 데이터의 값을
----
cloning
const user = {name: 'ellie', age: '20'};
const user2 = user;
이런 식으로 user2라는 오브젝트를 user를 복제해서 만들면
user2.name = 'coder';
console.log(user);
user의 log를 보았을 때 user의 이름까지 바뀐 것을 확인 할 수 있다.
cloning이란 이런 현상을 피하기위해 만든 방법이다.
대표적으로
const user2 = {};
Object.assign(user2, user);의 방법
혹은
const user2 = Object.assign({}, user);
와 같이
object.assign()을 이용할 수 있다.
----
[6. array]
----
배열선언 방법
const arr1 = new Array();
interface ArrayConstructor {
    /**
     * Creates an array from an array-like object.
     * @param arrayLike An array-like object to convert to an array.
     */
    from<T>(arrayLike: ArrayLike<T>): T[];
}
배열도 오브젝트처럼 선언해주면 된다고 나와있다.
----
push: 뒤에서 추가
pop: 뒤에 거 삭제
unshfit: 앞에서 추가
shift: 앞에서 삭제
----
splice
array.splice('지정한 인덱스부터','몇 개','지정한 인덱스부터 다음 것들을 추가');
----
array.concat(array2);
array의 마지막 인덱스 +1부터 array2의 인덱스들을 추가
----
searching
array.indexOf('temp');
temp가 array라는 배열의 몇 번째 인덱스에 있는가
+lastindexOf: temp는 배열의 인덱스 중에 마지막으로 속한 인덱스 몇 번인가
array.includes('temp');
array라는 배열에 temp라는 인덱스가 있는가 (boolean)
----
[7. array api]
----
api에 대해 블로그에서 정리해두었지만
https://draw-code-boy.tistory.com/7
여기서 다시 한 번 array api에 대해 정리해보자면
자바스크립트 내부에 array라는 obj가 선언되어있고
이를 통해 우리는 배열을 선언한다.
배열이라는 오브젝트 안에 선언된 메서드(method)를 사용함으로써
이를 array를 만드는데 도와주는 api라고 할 수 있다.
----
.join(): 배열 >> 스트링
.split(): 구분자(seperator)를 통해 스프링 >> 배열
.reverse(): 뒤집기
.slice(): ~부터 ~까지 자르겠다
.find(): 콜백함수를 통해 조건을 만족한 element를 리턴
.filter(): 콜백함수를 통해 조건을 만족한 element들을 모아 배열을 만듬
.map(): 콜백함수를 통해 해당하는 값으로 배열을 만듬
.some(): 하나라도 만족하는 것이 있는지 확인
.every(): 모두 만족하는지 확인
.reduce(): 값들을 누적하는 api
.sort(): 정렬
----
[8. JSON]
----
오브젝트(데이터)를 서버로 보내거나
서버에서 오브젝트(데이터)를 받아올 때 사용
----
JSON.stringify();
>>json을 통해 서버로 오브젝트를 보내겠다.
함수(method)를 stringify 하는 방법은 무엇인가
----
JSON.parse();
>>json을 통해서 서버에서 오브젝트를 받아오겠다.
optional function(callback)을 통해 key를 만났을 때
다시금 object를 선언해서 parsing 할 수 있다.
>>ex)
new Date();
----
[9. callback]
----
자바스크립트는 synchronous한 언어이다.
동기적인 언어라는 뜻이다.
코드를 작성함에 따라 즉각적으로 처리가 된다.
console.log를 통해 확인할 수 있다.
----
async는 비동기처리를 의미한다.
자바스크립트의 특징처럼 동기적인 처리가 아닌
비동기적으로 처리하겠다는 의미이다.
그 예시로
setTimeout을 통해 일부러 delay를 주어서
console.log를 통해 확인 할 수 있다.
----
[10. promise]